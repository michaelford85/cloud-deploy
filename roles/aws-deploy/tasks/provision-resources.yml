---

- name: Retrieve the current time in order to timestamp files
  ansible.builtin.setup:
    gather_subset:
     - date_time

- name: Add a timestamped file to my S3 Bucket
  amazon.aws.s3_object:
    bucket: "{{ aws_s3_bucket }}"
    object: "{{ aws_s3_project_name }}/"  # The 'key' for the folder, ends with '/'
    region: "{{ ec2_region }}"
    mode: put
    content: ""
  register: s3_create_folder_result

- name: Show result of folder creation
  ansible.builtin.debug:
    var: s3_create_folder_result

  # ansible.builtin.template:
  #   src: templates/awx-operator/kustomization.j2
  #   dest: "{{ tmp_dir }}/kustomization.yml.{{ ansible_date_time.iso8601_basic_short }}"

# - name: "Create AWS VPC {{ ec2_prefix }}-vpc"
#   amazon.aws.ec2_vpc_net:
#     region: "{{ ec2_region }}"
#     name: "{{ ec2_prefix }}-vpc"
#     cidr_block: "{{ ec2_vpc_cidr }}"
#     tags:
#       provisioner: mford
#       application: "{{ application }}"
#       demo: appdeployment
#   register: create_vpc

# # If a secruity group is not created, instances will be tied to the Default secruity grouop that allows all traffic (non-secure)
# - name: "Create EC2 Security Group {{ec2_prefix }}-sg"
#   amazon.aws.ec2_group:
#     region: "{{ ec2_region }}"
#     name: "{{ ec2_prefix }}-sg"
#     description: "Application VPC for {{ ec2_prefix }}"
#     vpc_id: "{{create_vpc.vpc.id}}"
#     tags:
#       provisioner: mford
#       Name: "{{ ec2_prefix }}-sg"
#       application: "{{ application }}"
#       demo: appdeployment
#     rules:
#       - proto: tcp
#         ports:
#         - 22
#         cidr_ip: 0.0.0.0/0
#       - proto: tcp
#         ports:
#         - 80
#         cidr_ip: 0.0.0.0/0
#       - proto: tcp
#         ports:
#         - 443
#         cidr_ip: 0.0.0.0/0
#       - proto: tcp
#         ports:
#         - 3306 # for mysql
#         cidr_ip: 0.0.0.0/0
#       - proto: tcp
#         ports:
#         - 8200 # Hashicorp vault
#         cidr_ip: 0.0.0.0/0

# # This task is subdiving up the 192.168.0.0/24 and getting a smaller chunk, a /28
# - name: "Create Subnet for {{ ec2_prefix }}-vpc"
#   amazon.aws.ec2_vpc_subnet:
#     region: "{{ ec2_region }}"
#     vpc_id: "{{ create_vpc.vpc.id }}"
#     map_public: yes
#     cidr: "{{ ec2_vpc_subnet }}"
#     tags:
#       provisioner: mford
#       application: "{{ application }}"
#       demo: appdeployment
#   register: create_subnet

# - name: Set ec2_subnet_id fact
#   ansible.builtin.set_fact:
#     ec2_vpc_subnet_id: "{{ create_subnet.subnet.id }}"

# # Create Internet Gateway and attach it to VPC.  This allows instances on this VPC to reach the Internet
# - name: "Create VPC Internet Gateway for {{ ec2_prefix }}-vpc"
#   community.aws.ec2_vpc_igw:
#     region: "{{ ec2_region }}"
#     vpc_id: "{{ create_vpc.vpc.id }}"
#     tags:
#       provisioner: mford
#       application: "{{ application }}"
#       demo: appdeployment
#   register: igw

# # This task adds a route to the internet from the subnet through the IGW
# - name: Create a Default Route for the Subnet
#   community.aws.ec2_vpc_route_table:
#     region: "{{ ec2_region }}"
#     vpc_id: "{{ create_vpc.vpc.id }}"
#     subnets:
#       - "{{ create_subnet.subnet.id }}"
#     routes:
#       - dest: 0.0.0.0/0
#         gateway_id: "{{ igw.gateway_id }}"
#     tags:
#       provisioner: mford
#       application: "{{ application }}"
#       demo: appdeployment
